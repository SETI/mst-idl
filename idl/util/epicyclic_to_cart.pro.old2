function epicyclic_to_cart, epicyclic, vel=vel, mu=gm, musat=musat, debug=debug, convert=convert, noj4=noj4, noj6=noj6

if n_params() eq 0 then begin
  print, 'Syntax:  Result = EPICYCLIC_TO_CART( epicyclic, vel=vel )'
  print, 'Converts epicyclic elements into Cartesian coordinates, using the method'
  print, 'of Renner and Sicardy (2006)'
endif

; Get Saturn mass and radius and J2
if keyword_set(musat) then saturn_constants, gm=gm, prad=prad, $
                                             j2=j2, j4=j4, j6=j6
if keyword_set(noj4) then j4 = 0
if keyword_set(noj6) then j6 = 0
if not keyword_set(gm) then stop, 'Must specify central mass mu'
if not keyword_set(prad) then stop, 'Must specify central body radius prad'
if not keyword_set(j2) then stop, 'Must specify gravity harmonic J2'

if keyword_set(convert) then convm = 'Converting...' else convm = 'Convert?'
; Check that semimajor axis is in km
if mean(epicyclic[*,0]) lt prad then begin
  print, 'epicyclic appears to be in Rsat instead of km.  '+convm
  if not keyword_set(convert) then stop
  epicyclic[*,0] = epicyclic[*,0] * prad
endif

; Check that angles are in radians
if max(epicyclic[*,2:5])-min(epicyclic[*,2:5]) gt 6.3 then begin
  print, 'epicyclic appears to be in degrees instead of radians.  '+convm
  if not keyword_set(convert) then stop
  epicyclic[*,2:5] = epicyclic[*,2:5] * !dpi / 180
endif

; Unpack epicyclic elements from the array epicyclic
aa = epicyclic[*,0]
ee = epicyclic[*,1]
ii = epicyclic[*,2]
omega = epicyclic[*,3]
pomega = epicyclic[*,4] + omega
lambda = epicyclic[*,5] + pomega

; Calculate frequencies, from RS06 Eqs 14 thru 21
nn = sqrt( gm / aa^3 ) * ( 1 $
                           + 3.0d0/4 * (prad/aa)^2 * j2 $
                           - 15.0d0/16 * (prad/aa)^4 * j4 $
                           + 35.0d0/32 * (prad/aa)^6 * j6 $
                           - 9.0d0/32 * (prad/aa)^4 * j2^2 $
                           + 45.0d0/64 * (prad/aa)^6 * j2 * j4 $
                           + 27.0d0/128 * (prad/aa)^6 * j2^3 $
                           + 3.0d0 * (prad/aa)^2 * j2 * ee^2 $
                           - 12.0d0 * (prad/aa)^2 * j2 * ii^2 )
kappa = sqrt( gm / aa^3 ) * ( 1 $
                              - 3.0d0/4 * (prad/aa)^2 * j2 $
                              + 45.0d0/16 * (prad/aa)^4 * j4 $
                              - 175.0d0/32 * (prad/aa)^6 * j6 $
                              - 9.0d0/32 * (prad/aa)^4 * j2^2 $
                              + 135.0d0/64 * (prad/aa)^6 * j2 * j4 $
                              - 27.0d0/128 * (prad/aa)^6 * j2^3 $
                              - 9.0d0 * (prad/aa)^2 * j2 * ii^2 )
nu = sqrt( gm / aa^3 ) * ( 1 $
                           + 9.0d0/4 * (prad/aa)^2 * j2 $
                           - 75.0d0/16 * (prad/aa)^4 * j4 $
                           + 245.0d0/32 * (prad/aa)^6 * j6 $
                           - 81.0d0/32 * (prad/aa)^4 * j2^2 $
                           + 675.0d0/64 * (prad/aa)^6 * j2 * j4 $
                           + 729.0d0/128 * (prad/aa)^6 * j2^3 $
                           + 6.0d0 * (prad/aa)^2 * j2 * ee^2 $
                           - 51.0d0/4 * (prad/aa)^2 * j2 * ii^2 )
kappa2 = kappa^2
nu2 = nu^2
eta2 = gm / aa^3 * ( 1 $
                     - 2.0d0 * (prad/aa)^2 * j2 $
                     + 75.0d0/8 * (prad/aa)^4 * j4 $
                     - 175.0d0/8 * (prad/aa)^6 * j6 )
chi2 = gm / aa^3 * ( 1 $
                     + 15.0d0/2 * (prad/aa)^2 * j2 $
                     - 175.0d0/8 * (prad/aa)^4 * j4 $
                     + 735.0d0/16 * (prad/aa)^6 * j6 )
alpha_1 = 1.0d0/3 * ( 2*nu + kappa )
alpha_2 = 2*nu - kappa
alpha2 = alpha_1 * alpha_2

; Calculate cylindrical coordinates, from RS06 Eqs 2 thru 7
rr = aa*( 1 $
          - ee*cos(lambda-pomega) $
          + ee^2*( 1.5d0*eta2/kappa2 - 1 $
                   - eta2/2/kappa2*cos(2*(lambda-pomega)) ) $
          + ii^2*( 0.75d0*chi2/kappa2 - 1 $
                   + chi2/4/alpha2*cos(2*(lambda-omega)) ) )
ll = lambda + 2*ee*nn/kappa*sin(lambda-pomega) $
     + ee^2*( 0.75d0 + eta2/2/kappa2 )*nn/kappa*sin(2*(lambda-pomega)) $
     - ii^2*chi2/4/alpha2*nn/nu*sin(2*(lambda-pomega))
zz = aa*ii*( sin(lambda-omega) $
             + ee*chi2/2/kappa/alpha_1*sin(2*lambda-pomega-omega) $
             - 1.5d0*ee*chi2/kappa/alpha_2*sin(pomega-omega) )
rdot = aa*kappa*( ee*sin(lambda-pomega) $
                  + ee^2*eta2/kappa2*sin(2*(lambda-pomega)) $
                  - ii^2*chi2/2/alpha2*nu/kappa*sin(2*(lambda-omega)) )
ldot = nn*( 1 $
            + 2*ee*cos(lambda-pomega) $
            + ee^2*( 3.5d0 - 3.0d0*eta2/kappa2 - kappa2/2/nn^2 $
                     + ( 1.5d0 + eta2/kappa2 )*cos(2*(lambda-pomega)) ) $
            + ii^2*( 2.0d0 - 1.5d0*chi2/kappa2 - kappa2/2/nn^2 $
                     - chi2/2/alpha2*cos(2*(lambda-omega)) ) )
zdot = aa*ii*nu*( cos(lambda-omega) $
                  + ee*chi2*(kappa+nu)/2/kappa/alpha_1/nu*$
                                      cos(2*lambda-pomega-omega) $
                  + 1.5d0*ee*chi2*(kappa-nu)/kappa/alpha_2/nu*$
                                      cos(pomega-omega) )

; Calculate Cartesian coordinates, from RS06 Eqs 8 thru 13
xx = rr*cos(ll)
yy = rr*sin(ll)
xdot = rdot*cos(ll) - rr*ldot*sin(ll)
ydot = rdot*sin(ll) + rr*ldot*cos(ll)

pos = [ [xx], [yy], [zz] ]
vel = [ [xdot], [ydot], [zdot] ]

if keyword_set(debug) then stop

return, pos

end
