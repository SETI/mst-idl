torq = 0.0d0
rres = 0.0d0
rname = ''
series = 0

if not keyword_exists(lc82) then lc82 = 0;1

; Still to do:  
; 1) Pan OLRs
; 2) third-order waves (like Mimas), and higher order,
; 3) 1:0 resonances
; 4) Bending waves, and e*I'^2 density waves
; Most of these will involve redoing the derivation myself, and seeing where
; to put the necessary Disturbing Function components.  
; For higher-order waves, need to update Laplace coefficient program.

for m=2,100 do begin
  ; Atlas first order
  torq = [ torq, restorque(m,m-1,0,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 40 ]
  rname = [ rname, res_descrip ]
endfor
;for m=2,9 do begin
;  ; Atlas second order
;  torq = [ torq, restorque(m+1,m-1,0,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 50 ]
;  rname = [ rname, res_descrip ]
;endfor
;for m=20,50 do begin
;  ; Atlas exterior, first order
;  torq = [ torq, restorque(m,m+1,0,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 60 ]
;  rname = [ rname, res_descrip ]
;endfor
for m=2,115 do begin
  ; Pan first order
  torq = [ torq, restorque(m,m-1,10,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 10 ]
  rname = [ rname, res_descrip ]
endfor
;for m=2,9 do begin
;  ; Pan second order
;  torq = [ torq, restorque(m+1,m-1,10,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 20 ]
;  rname = [ rname, res_descrip ]
;endfor
for m=10,115 do begin
  ; Pan exterior, first order
  torq = [ torq, restorque(m,m+1,10,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 30 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,38 do begin
  ; Prometheus first order
  torq = [ torq, restorque(m,m-1,1,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 90 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,74 do begin
  ; Prometheus second order
  torq = [ torq, restorque(m+1,m-1,1,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 100 ]
  rname = [ rname, res_descrip ]
endfor
for m=14,105 do begin
  ; Prometheus third order
  torq = [ torq, restorque(m+2,m-1,1,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 5 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,19 do begin
  ; Pandora first order
  torq = [ torq, restorque(m,m-1,2,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 70 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,38 do begin
  ; Pandora second order
  torq = [ torq, restorque(m+1,m-1,2,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 80 ]
  rname = [ rname, res_descrip ]
endfor
for m=11,55 do begin
  ; Pandora third order
  torq = [ torq, restorque(m+2,m-1,2,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 4 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,10 do begin
  ; Janus first order
  torq = [ torq, restorque(m,m-1,4,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 110 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,21 do begin
  ; Janus second order
  torq = [ torq, restorque(m+1,m-1,4,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 120 ]
  rname = [ rname, res_descrip ]
endfor
for m=3,29 do begin
  ; Janus third order
  torq = [ torq, restorque(m+2,m-1,4,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 75 ]
  rname = [ rname, res_descrip ]
endfor
for m=10,37 do begin
  ; Janus fourth order
  torq = [ torq, restorque(m+3,m-1,4,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 2 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,10 do begin
  ; Epimetheus first order
  torq = [ torq, restorque(m,m-1,3,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 130 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,21 do begin
  ; Epimetheus second order
  torq = [ torq, restorque(m+1,m-1,3,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 140 ]
  rname = [ rname, res_descrip ]
endfor
for m=4,29 do begin
  ; Epimetheus third order
  torq = [ torq, restorque(m+2,m-1,3,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 76 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,3 do begin
  ; Mimas first order
  torq = [ torq, restorque(m,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 150 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,5 do begin
  ; Mimas second order
  torq = [ torq, restorque(m+1,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 160 ]
  rname = [ rname, res_descrip ]
  ;torq = [ torq, restorque(m+1,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres,/bending) ]
  ;rres = [ rres, _rres ]
  ;series = [ series, 170 ]
  ;rname = [ rname, res_descrip ]
endfor
for m=2,7 do begin
  ; Mimas third order
  for bw=0,2 do begin
    torq = [ torq, restorque(m+2,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
    rres = [ rres, _rres ]
    series = [ series, 180 ]
    rname = [ rname, res_descrip ];+ ' (ee''^2)' ]
    ;torq = [ torq, restorque(m+2,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres,/bending) ]
    ;rres = [ rres, _rres ]
    ;series = [ series, 190 ]
    ;rname = [ rname, res_descrip + ' (e''II'')' ]
    ;torq = [ torq, restorque(m+2,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres, p=2) ]
    ;rres = [ rres, _rres ]
    ;series = [ series, 200 ]
    ;rname = [ rname, res_descrip + ' (eI''^2)' ]
  endfor
endfor
for m=2,7 do begin
  ; Mimas fourth order
  for bw=0,2 do begin
    torq = [ torq, restorque(m+3,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
    rres = [ rres, _rres ]
    series = [ series, 280 ]
    rname = [ rname, res_descrip ]
  endfor
endfor
for m=5,10 do begin
  ; Mimas fifth order
  for bw=0,2 do begin
    torq = [ torq, restorque(m+4,m-1,5,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
    rres = [ rres, _rres ]
    series = [ series, 285 ]
    rname = [ rname, res_descrip ]
  endfor
endfor
for m=2,2 do begin
  ; Enceladus 3:1
  torq = [ torq, restorque(m+1,m-1,6,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 210 ]
  rname = [ rname, res_descrip ]
endfor
for m=2,3 do begin
  ; Enceladus third order
  torq = [ torq, restorque(m+2,m-1,6,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
  rres = [ rres, _rres ]
  series = [ series, 260 ]
  rname = [ rname, res_descrip ]
endfor
;for m=2,3 do begin
;  ; Enceladus fourth order
;  torq = [ torq, restorque(m+3,m-1,6,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 270 ]
;  rname = [ rname, res_descrip ]
;endfor
;for m=1,1 do begin
;  ; Iapetus 1:0
;  torq = [ torq, restorque(m,m-1,9,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 220 ]
;  rname = [ rname, res_descrip ]
;  order = [ order, 1 ]
;  ; Iapetus -1:0 BW
;  torq = [ torq, restorque(-m,m-1,9,res_descrip=res_descrip,bending=1,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 230 ]
;  rname = [ rname, res_descrip ]
;  order = [ order, 1 ]
;endfor
;for m=1,1 do begin
;  ; Titan 1:0
;  torq = [ torq, restorque(m,m-1,7,res_descrip=res_descrip,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 240 ]
;  rname = [ rname, res_descrip ]
;  order = [ order, 1 ]
;  ; Titan -1:0 BW
;  torq = [ torq, restorque(-m,m-1,7,res_descrip=res_descrip,bending=1,/short,lc82=lc82,rres=_rres) ]
;  rres = [ rres, _rres ]
;  series = [ series, 250 ]
;  rname = [ rname, res_descrip ]
;  order = [ order, 1 ]
;endfor

; For apsidal resonance, not yet implemented in restorque.pro, 
; enter values from LC82
torq = [ torq, -1.39e18/1e20, -7.17e12/1e20 ]
rres = [ rres, resloc(1,0,606,res_descrip=res_descrip1,/short,lc82=lc82), $
               resloc(1,0,608,res_descrip=res_descrip2,/short,lc82=lc82) ]
series = [ series, 401, 400 ]
rname = [ rname, res_descrip1, res_descrip2 ]

torq = clip(torq)
rres = clip(rres)
rname = clip(rname)
series = clip(series)
solid_diamonds
if !d.name eq 'X' then syms=1 else syms=0.5

if keyword_set(lc82) then begin
  plot, [2.07,2.27], [15.75,19.3], /xs, /ys, /nodata, $
    tit='Lissauer and Cuzzi (1982) Values', $
    xtit='Radial Position (R!DSaturn!N)', $
    ytit='Log!D10!N Resonance Strength (T!UL!N!Dl,m!N/!Ms, cm!U4!N sec!U-2!N)'
  use = [1,7,9,11,13]
  for j=0,n_elements(use)-1 do begin
    foo = where( series eq use[j], count )
    if count gt 0 then begin
      oplot, rres[foo]/60330e5,  alog10(abs(torq[foo])), ps=-8, syms=syms
      case use[j] of
         1: _foo = foo[0]
         7: _foo = foo[[8,13,18]]
         9: _foo = foo[12:n_elements(foo)-1]
        11: _foo = foo[0:5]
        13: _foo = foo[3:4]
        else: _foo = foo
      endcase
      align = 0
      mark:
      xyouts, rres[_foo]/60330e5, alog10(abs(torq[_foo])), $
              '  '+strmid(rname[_foo],2,20)+'    ', orient=90, align=align
      if align eq 0 and (use[j] eq 9 or use[j] eq 13) then begin
        case use[j] of 
           9: _foo = foo[4:11]
          13: _foo = [ foo[[2,5]] ]
        endcase
        align = 1
        goto, mark
      endif
    endif
  endfor
  moons = [ 'Janus', 'Prometheus', 'Epimetheus', 'Pandora' ]
  moont = [ 18.55, 17.55, 17.3, 16.95 ]
  for j=0,n_elements(moons)-1 do begin
    xyouts, 2.09, moont[j], moons[j]
  endfor
  xyouts, 2.26, 16, 'Atlas', align=1
endif else begin
  xtit='Radial Position (kkm)'
  ytit='Log!D10!N Resonance Strength (T!UL!N!Dl,m!N/!Ms, km!U4!N sec!U-2!N)'
  if keyword_set(aonly) then begin
    plot, [122,137], [-7.5,-1.5], /xs, /ys, /nodata, xtit=xtit, ytit=ytit
    rads = [ 122.34, 133.423, 133.745, 136.5, 136.78 ]
    intnames = replicate('',5)
  endif else begin
    rads = [ 66.9, 74.658, 91.975, 117.507, 122.34, 136.78, 140.219 ]
    ints1 = rebin( [ [rads[1:5]], [rads[0:4]] ], 5, 1 )
    ints1 = [ ints1, rads[6] ]
    intnames = [ 'D', 'C', 'B', 'CD', 'A', 'F' ]
    if keyword_set(xlog) then begin
      xlog0 = 145
      xr = [60,137.5]
      xtn = indgen( (xr[1]-xr[0])/10+1 )*10 + 60
      xtn1 = indgen( (xr[1]-xr[0])/2+1 )*2 + 60
      xtnb = replicate(' ',60)
      plot, xlog0-xr, [-11.5,0.5], /xs, /ys, /nodata, $
            xtit=xtit, ytit=ytit, /xlog, xr=xlog0-xr, $
            xtickv=xlog0-xtn, xticks=n_elements(xtn)-1, xtickn=strtrim(xtn,2)
      axis, xaxis=0, /data, /xs, xtickle=!p.ticklen/2, $
            xtickv=xlog0-xtn1, xticks=n_elements(xtn1)-1, xtickn=xtnb
      axis, xaxis=1, /data, /xs, xtickle=!p.ticklen/2, $
            xtickv=xlog0-xtn1, xticks=n_elements(xtn1)-1, xtickn=xtnb
      rads = xlog0 - rads
      torq = vec_remove( torq, where(rres gt xr[1]*1e3) )
      rname = vec_remove( rname, where(rres gt xr[1]*1e3) )
      series = vec_remove( series, where(rres gt xr[1]*1e3) )
      rres = vec_remove( rres, where(rres gt xr[1]*1e3) )
      rres = xlog0*1e3 - rres
      ints1 = rebin( [ [alog10(rads[1:5])], [alog10(rads[0:4])] ], 5, 1 )
      ints1 = [ 10^ints1, rads[6] ]
    endif else begin
      plot, [60,144], [-11.5,0.5], /xs, /ys, /nodata, xtit=xtit, ytit=ytit
    endelse
  endelse
  ;use = [1,7,9,11,13]
  use = series[uniq( series, sort(series) )]
  for j=0,n_elements(use)-1 do begin
    foo = where( series eq use[j], count )
    if count gt 0 then begin
      if not keyword_set(mooncolor) then mooncolor=0
      clr = get_mooncolor( rname[foo[0]], nocolor=1-mooncolor )
      oplot, tkm(rres[foo]), alog10(abs(torq[foo])), ps=-8, color=clr, syms=syms
      if not keyword_set(aonly) then begin
        if rname[foo[0]] eq 'Pr 3:1' then align=0 else align=1
        if rname[foo[0]] eq 'Ia 1:0' then ia=0 else ia=1
        xyouts, tkm(rres[foo[0]]), alog10(abs(torq[foo[0]]))-.2*ia, $
                rname[foo[0]], align=align, color=clr
      endif
    endif
  endfor
  if keyword_set(aonly) then begin
    rnplot = [ 'Pr 12:10', 'Pd 11:9', 'Pan 9:8', 'At 7:6', $
               'Ep 8:6', 'Ja 8:6', 'Pd 5:4', 'Pr 6:5', 'Ep 4:3', $
               'Ja 4:3', 'Mi 5:3', 'Pan 40:41  ' ]
    rplot = dblarr(n_elements(rnplot))
    for j=0,n_elements(rnplot)-1 do begin
      foo = where( rname eq strtrim(rnplot[j],2), count )
      if strmid(rnplot[j],0,3) eq 'Pan' and rnplot[j] ne 'Pan 9:8' $
        then align=1 else align=0
      xyouts, tkm(rres[foo])+.2, alog10(abs(torq[foo]))-.1, rnplot[j], $
              align=align
    endfor
  endif
  for j=0,n_elements(rads)-1 do oplot, rads[j]*[1,1], [-1e10,1e10], l=1
  xyouts, ints1, replicate(-11,n_elements(ints1)), intnames, align=.5
endelse

end
