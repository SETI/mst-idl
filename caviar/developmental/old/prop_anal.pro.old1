; Compare identified propeller-candidate locations from adjacent images, 
; look for any that appear in multiple images
if not keyword_set(findfile('propellers.sav')) then begin
  if not keyword_set(propsuff) then propsuff = '.cray'
  files = findfile( '*'+propsuff )
  if keyword_set(files) then begin
    nf = n_elements(files)
    dot = strpos( files, propsuff )
    filestem = files
    @get_cam_params
    cspice_furnsh,getenv("CAVIAR_KERNELS")
    restore, 'et.sav'
    restore, 'stretch.sav'
    for j=0,nf-1 do begin
      filestem[j] = strmid( files[j], 0, dot[j] )
      jjj = (where( filestem[j] eq $
                    strmid( filenames, 0, strlen(filestem[j]) ), count ))[0]
      if count ne 1 then stop, 'Not a single match to filenames.'
      restore, files[j]
      ncray = n_elements( cray[*,0] )
      restore, filestem[j]+'.offset'
      p2radec, cam_params, cmat, nl, cray[*,0], cray[*,1], ra, dec
      p2ralon, cmat, _et[jjj], polera, poledec, sc, ra, dec, radius, lon
      p2radec, cam_params, cmat, nl, [0,1023,1023,0], [0,0,1023,1023], cra, cdec
      p2ralon, cmat, _et[jjj], polera, poledec, sc, cra, cdec, cradius, clon
      if j eq 0 then begin
        image = replicate( filestem[j]+'.IMG', ncray )
        prop_rad = radius
        prop_lon = lon
        prop_xy = cray
        corn_rad = rotate(cradius,1)
        corn_lon = rotate(clon,1)
      endif else begin
        image = [ image, replicate( filestem[j]+'.IMG', ncray ) ]
        prop_rad = [ prop_rad, radius ]
        prop_lon = [ prop_lon, lon ]
        prop_xy = [ prop_xy, cray ]
        corn_rad = [ corn_rad, rotate(cradius,1) ]
        corn_lon = [ corn_lon, rotate(clon,1) ]
      endelse
    endfor
    image_num = long(strmid( image, 1, 10 ))
    image_nums = image_num[ uniq(image_num) ]
    save, image, image_num, image_nums, prop_rad, prop_lon, prop_xy, $
          corn_rad, corn_lon, nf, filename='propellers.sav'
  endif else stop, 'No *'+propsuff+' files found.'
endif else restore, 'propellers.sav'
prop_lon_corr = prop_lon - sqrt(caviar_omega2(prop_rad)) * 180 / !dpi * $
                           ( image_num - image_num[0] )
if keyword_set(corn_lon) then begin
  corn_lon_corr = corn_lon - sqrt(caviar_omega2(corn_rad)) * 180 / !dpi * $
                             ( rebin(image_nums,nf,4) - image_num[0] )
endif
if keyword_set(decrease) then begin
  lons = [ max(prop_lon_corr), min(prop_lon_corr) ]
endif else begin
  lons = [ min(prop_lon_corr), max(prop_lon_corr) ]
endelse
if keyword_set(dolzr) then begin
  spawn, 'pwd', pwd
  lslashes = rstrpos( pwd, '/' )
  lslashes = [ lslashes, rstrpos( pwd, '/', lslashes ) ]
  if keyword_set(doubleplot) then if not keyword_set(qport) then port=1
  lzr, 'prop_anal_'+strmid( pwd, lslashes[1]+1, lslashes[0]-lslashes[1]-1 )+$
                    strlowcase(strmid( pwd, lslashes[0]+1, 1000 )), $
                    port=port, qport=qport
  !p.multi = [0,2,2]
  @plot_prepare
  plot_color
  reverse = 0
endif
if keyword_set(doubleplot) then begin
  !p.multi = [0,1,2]
  reverse = 0
  if 4 eq 5 then begin
    redo:
    reverse = 1
  endif
endif
if keyword_set(_yr) then yr = _yr
if keyword_set(_xr) then xr = _xr else xr = lons
if not keyword_set(tit) then tit = ''
plot, /nodata, lons, tkm([ min(prop_rad), max(prop_rad) ]), xr=xr, yr=yr, $
      /xs, /ys, xtit='Co-Rotating Longitude (!Uo!N)', ytit='Radius'+tkmtit(), $
      tit=tit
solid_small_circles
if keyword_set(reverse) then begin
  j1 = n_elements(image_nums)-1
  j2 = 0
  j3 = -1
endif else begin
  j1 = 0
  j2 = n_elements(image_nums)-1
  j3 = 1
endelse
clr = [ ctred(), ctcyan(), ctyellow(), ctpurple(), ctgreen(), ctblue() ]
nclr = n_elements(clr)
for j=j1,j2,j3 do begin
  foo = where( image_num eq image_nums[j] )
  oplot, prop_lon_corr[foo], tkm(prop_rad[foo]), ps=8, co=clr[j mod nclr]
  if keyword_set(corn_lon_corr) then begin
    oplot, corn_lon_corr[j,[0,1,2,3,0]], tkm(corn_rad[j,[0,1,2,3,0]]), $
           l=1, co=clr[j mod nclr]
  endif
endfor

if keyword_set(doubleplot) then if reverse eq 0 then goto, redo
if keyword_set(dolzr) then clzr

end
