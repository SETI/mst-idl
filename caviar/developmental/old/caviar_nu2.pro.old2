function caviar_nu2, r, dnu_dr, dnu2_dr=dnu2_dr, lc82=lc82, gm=_gm, prad=_prad, j2=_j2, j4=_j4, j6=_j6, j8=_j8, noj8=noj8

if n_params() eq 0 then begin
  print, 'Syntax:  Result = CAVIAR_NU2( r, dnu_dr )'
  print, 'Returns the square of the mean motion (radians/sec) for radius r in Saturn''s ring plane,'
  print, 'accounting for Saturn''s j2, j4, and j6.  '
  print, 'Optionally returns the derivative (radians/sec/km) as well.'
  retall
endif

;; Saturn mass, radius, and harmonics from JPL kernel cpck05May2004.tpc
;gm = 37931289.4836 ;km^3/s^2
;prad = 60330.0d0 ;km
;j2 = 0.016292243237d
;j4 = -0.000928716077d
;j6 = 0.000088845313
saturn_constants, gm=gm, prad=prad, j2=j2, j4=j4, j6=j6, j8=j8
if not keyword_set(j8) then j8=0
if keyword_set(noj8) then j8=0
if keyword_set(lc82) then begin
  ; Use values from Lissauer and Cuzzi (1982)
  gm = 37929141.6d ;km^3/s^2
  j2 = 16299.1d-6
  j4 = -916.7d-6
  j6 = 81.3d-6
  j8 = 0
endif
; Overwrite with input values, if they exist
if keyword_exists(_gm) then gm = _gm
if keyword_exists(_prad) then prad = _prad
if keyword_exists(_j2) then j2 = _j2
if keyword_exists(_j4) then j4 = _j4
if keyword_exists(_j6) then j6 = _j6
if keyword_exists(_j8) then j8 = _j8

; From MD99 Eq 6.243, nu^2 = (1/a) ( partial V / partial r )_0
;                            + (1/a^2) (partial^2 V / partial alpha^2 )_0
; where MD99 Eq 6.218 gives 
; V = -gm/r * ( 1 - Sum_i P_i(sin(alpha))*J_i*(prad/r)^i ) 
; Let sin(alpha)=x.  The Legendre polynomials are evaluated at x=0.
; ==> d[P_i(sin(alpha))]/d(alpha) = d[P_i(x)]/dx*cos(alpha) = d[P_i(x)]/dx
; P_2(x) = (3/2)x^2 - 1/2 ==> P_2(0) = -1/2 and P''_2(0) = 3
; P_4(x) = (35/8)x^4 - (15/4)x^2 + 3/8 ==> P_4(0) = 3/8 and P''_4(0) = -15/2
; P_6(x) = (231/16)x^6 - (315/16)x^4 + (105/16)x^2 - 5/16
;      ==> P_6(0) = -5/16 and P''_6(0) = 105/8
; P_8(x) = (6435/128)x^8 - (3003/32)x^6 + (3465/64)x^4 -(315/32)x^2 + 35/128
;      ==> P_8(0) = 35/128 and P''_8(0) = -315/16
; ==> dV/dr = gm/r^2 * ( 1 - Sum_i (i+1)*P_i(0)*J_i*(prad/r)^i )
; ==> dV/d(alpha) = Sum_i (gm/r)*J_i*(prad/r)^i*P'_i(0)
; ==> d2V/d(alpha)2 = Sum_i (gm/r)*J_i*(prad/r)^i*P''_i(0)
; nu^2 = gm/r^3 * ( 1 - Sum_i J_i*(prad/r)^i*[ (i+1)*P_i(0) - P''_i(0) ] )
nu2 = gm / r^3 * ( 1 + j2*9/2*(prad/r)^2 - j4*75/8*(prad/r)^4 $
                     + j6*245/16*(prad/r)^6 - j8*2835/128*(prad/r)^8 )
; nu^2 = gm/r^3 - Sum_i gm*J_i*prad^i*r^{-i-3}*[ (i+1)*P_i(0) - P''_i(0) ] )
; d(nu^2)/dr = gm/r^4 * ( - 3 + Sum_i (i+3)*J_i*(prad/r)^i*[ (i+1)*P_i(0) 
;                                                            - P''_i(0) ] )
dnu2_dr = gm / r^4 * ( -3 - j2*45/2*(prad/r)^2 + j4*525/8*(prad/r)^4 $
                          - j6*2205/16*(prad/r)^6 )
; d(nu^2)/dr = 2*nu*d(nu)/dr
dnu_dr = dnu2_dr / 2 / sqrt(nu2)

return, nu2

end
